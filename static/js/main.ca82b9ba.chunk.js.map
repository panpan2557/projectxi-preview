{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ProjectXI","props","react_default","a","createElement","className","title","src","style","width","height","target","rel","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","window","innerWidth","App_ProjectXI","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAsBMA,qBAAY,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAA2B,4CAG7CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAA2B,+GAG5CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACbH,EAAAC,EAAAC,cAAA,UACEE,MAAM,gBACNC,IAAI,4BACJC,MAAO,CACLC,MAAO,OACPC,OAAuB,GAAfT,EAAMQ,WAItBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAA+B,qCAC5CH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAc,sEACzBH,EAAAC,EAAAC,cAAA,qBAAoB,0BAA2BF,EAAAC,EAAAC,cAAA,YAAQ,mBACzDF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAc,sDACzBH,EAAAC,EAAAC,cAAA,KAAGO,OAAO,SAASC,IAAI,sBAAsBC,KAAK,8GAAlD,SAEM,sBAGVX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6DACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAAb,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACT,wNAEJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,UAAM,yIACNF,EAAAC,EAAAC,cAAA,UAAM,gJACNF,EAAAC,EAAAC,cAAA,UAAM,gLAqCDU,cA7Bb,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,MAAQ,CAAEb,MAAO,GAFLM,oFAMjBG,KAAKK,SAAS,CAACd,MAAOe,OAAOC,8CAe7B,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAD,CAAWjB,MAAOS,KAAKI,MAAMb,gBAxBnBkB,aC3DEC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca82b9ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\nconst Index = (props) => (\n  <div className=\"container-fluid\">\n    <h1 className=\"def-f t-4 m-5 text-center\" >{ 'Punpikorn Rattanawirojkul (PUN)' }</h1>\n    <div className=\"row\">\n      <div className=\"col-sm-12 text-center\">\n          <Link to=\"/projectxi/\">\n            <Button outline color=\"primary\" size=\"lg\">\n              <p className=\"def-f t-2 m-5 text-center\">\n                { 'Project XI Preview' }\n              </p>\n            </Button>\n          </Link>\n      </div>\n    </div>\n  </div>\n);\n\nconst ProjectXI = (props) => (\n  <div className=\"container-fluid\">\n    <div className=\"row mt-5\">\n      <div className=\"col-sm-12\">\n        <h1 className=\"def-f t-4 text-center\" >{ 'Project XI: Virtual Space Tour Preview' }</h1>\n      </div>\n    </div>\n    <div className=\"row mt-5 mb-2\">\n      <div className=\"col-sm-12\">\n        <p className=\"def-f t-2 text-center\" >{ 'Gaze at the button for 3 seconds to navigate, or you could click at it when the reticle enters the button' }</p>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-sm-offset-1 col-sm-10 col-sm-offset-1\">\n        <iframe\n          title=\"projectxi-360\"\n          src=\"/projectxi-360/index.html\"\n          style={{\n            width: '100%',\n            height: props.width * (0.40)\n          }} />\n      </div>\n    </div>\n    <div className=\"row mt-5\">\n      <div className=\"note col-sm-offset-1 col-sm-10 col-sm-offset-1\">\n        <p className=\"def-f font-weight-bold t-3\">{ 'Note for Google Cardboard users: ' }</p>\n        <p className=\"def-f t-2\">{ 'Please access this website using Google Chrome and also enable the '}\n          <code>WebVR</code>{ ' flag by navigating to ' }<code>{ 'chrome://flags' }</code></p>\n        <p className=\"def-f t-2\">{ 'Or please have a look at the first section of this ' }\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hackernoon.com/how-i-got-a-react-vr-dev-environment-working-with-an-android-cardboard-1fcaf00faebc\">\n            Guide\n          </a>{ ' for more detail.'}\n        </p>\n      </div>\n      <div className=\"acknowledgement col-sm-offset-1 col-sm-10 col-sm-offset-1\">\n        <p className=\"def-f font-weight-bold t-3\">Acknowledgement</p>\n        <p className=\"def-f t-2\">\n          { 'The tools and technologies used to develop this preview is quite new to me. This mini-project would not be able to complete in just a short-time (around 2 weeks) without the suggestions from the following people,' }\n        </p>\n        <ul className=\"def-f t-2\">\n          <li>{ 'Promboon J. (Golf): Thank you for providing a quick summary of Redux and a wonderful idea of the software design behind this project.' }</li>\n          <li>{ 'Chinnaporn S. (Chin): Thank you for a general suggestions of React and the way to deploy this project, including your encouragement as well.' }</li>\n          <li>{ 'Kittipat P. (Maxmi): Thank you for helping me made a decision on the tools behind this project, reminding me a good time when we developed the Project XI 2 years ago!' }</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0 };\n  }\n\n  componentWillMount(){\n    this.setState({width: window.innerWidth});\n  }\n\n  // Keep the router away first ...\n  // <Router>\n  //   <div>\n  //     <Route path=\"/\" exact component={Index}></Route>\n  //     <Route path=\"/projectxi/\"\n  //       render={() => (\n  //\n  //       )}/>\n  //   </div>\n  // </Router>\n\n  render() {\n    return (\n      <div>\n        <ProjectXI width={this.state.width} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}